@model SchoolDatabase.Models.Teacher

<div id="containershow">
    <nav>
        <a class="navlink" href="/TeacherPage/Show/@Model.teacherid">Back</a>
    </nav>
    <h2>New Teacher</h2>
    <form id="teacherForm" method="POST" action="/TeacherPage/Update/@Model.teacherid">
        <div class="inputrow">
            <label for="TeacherFname">First Name:</label>
            <input type="text" id="TeacherFname" name="TeacherFname" value="@Model.teacherfname" />
        </div>
        <div class="inputrow">
            <label for="TeacherLname">Last Name:</label>
            <input type="text" id="TeacherLname" name="TeacherLname" value="@Model.teacherlname" />
        </div>
        <div class="inputrow">
            <label for="EmpolyeeNumber">Employee Number:</label>
            <input type="text" id="EmpolyeeNumber" name="EmpolyeeNumber" value="@Model.employeenumber" />
        </div>
        <div class="inputrow">
            <label for="HireDate">Hire Date:</label>
            <div>
                <textarea id="HireDate" name="HireDate">@Model.hiredate</textarea>
            </div>
        </div>
        <div class="inputrow">
            <label for="Salary">Salary:</label>
            <div>
                <textarea id="Salary" name="Salary">@Model.salary</textarea>
            </div>
        </div>
        <div class="inputrow">
            <input type="submit" value="Update Teacher" />
        </div>
    </form>
</div>

<script>
    document.getElementById('teacherForm').addEventListener('submit', function (event) {
        // Get form values
        const firstName = document.getElementById('TeacherFname').value.trim();
        const lastName = document.getElementById('TeacherLname').value.trim();
        const hireDate = new Date(document.getElementById('HireDate').value.trim());
        const salary = parseFloat(document.getElementById('Salary').value.trim());

        // Check if Teacher Name is empty
        if (!firstName || !lastName) {
            alert("Error: Teacher's name cannot be empty.");
            event.preventDefault(); // Prevent form submission
            return;
        }

        // Check if Hire Date is in the future
        const currentDate = new Date();
        if (hireDate > currentDate) {
            alert("Error: Hire Date cannot be in the future.");
            event.preventDefault(); // Prevent form submission
            return;
        }

        // Check if Salary is less than 0
        if (isNaN(salary) || salary <= 0) {
            alert("Error: Salary cannot be less than 0.");
            event.preventDefault(); // Prevent form submission
            return;
        }
    });
</script>
